# -*- coding: utf-8 -*-
"""Asistensi_19_1126.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/fathimahaulia/python-asistensi-21-git/blob/main/Asistensi_19_1126.ipynb

# $\text{Python Oct 22 | Asistensi 19 | Mini Case}$
- Sabtu, 26 November 2022
- [Study Case Instruction](https://docs.google.com/document/d/1t9ACvVyYYv-LG3A8Q-ErmFcv0NL4GqVjlw2J-d7L76o/edit?usp=sharing)
"""

import pandas as pd
from tabulate import tabulate

dictionary = {1:[20, 3],
              2:[30, 2],
              3:[10, 1]}

for i in :
    print(i)

for i in dictionary.keys():
    val = dictionary[i][0]*dictionary[i][1]
    dictionary[i].append(val)

dictionary

"""# $\text{Case: Dictionary Implementation}$

## $\text{Buat Class beserta Methods}$
"""

class Library:
    def __init__(self):
        """
        fungsi menginisialisasi dictionary

        """
        self.data_buku = dict()
        self.buku_pinjam = dict()

    def tambah_buku(self, judul, tahun, jumlah):
        """
        fungsi menambahkan data buku

        parameters
        judul       : str   judul buku yang akan ditambahkan
        tahun       : int   tahun terbit buku
        jumlah      : int   banyak buku tersebut pada perpustakaan

        """
        self.data_buku.update({judul: [tahun, jumlah]})

    def update_judul(self, judul, judul_baru):
        """
        fungsi untuk memperbarui judul buku

        parameters
        judul       : str   judul buku yang ingin diperbarui
        judul_baru  : str   judul baru untuk buku
        """
        temp = self.data_buku[judul]
        self.data_buku.pop(judul)
        self.data_buku.update({judul_baru: temp})

    def update_tahun(self, judul, tahun_baru):
        self.data_buku[judul][0] = tahun_baru
    
    def update_jumlah(self, judul, jumlah_baru):
        self.data_buku[judul][1] = jumlah_baru

    def check_data_buku(self):
        # print(self.data_buku)
        data = pd.DataFrame(self.data_buku).T
        data.columns = ['Tahun Terbit', 'Jumlah Buku']
        print(data.to_markdown())
    
    def pinjam_buku(self, judul):
        if self.data_buku[judul][1] == 0:
            print("maaf buku habis")
        else:
            self.update_jumlah(judul, self.data_buku[judul][1]-1)

        self.buku_pinjam.update({judul: self.data_buku[judul]})
    
    def kembali_buku(self, judul):
        self.update_jumlah(judul, self.data_buku[judul][1]+1)
        self.buku_pinjam.pop(judul)

    def check_pinjam_buku(self):
        # print(self.data_buku)
        if self.buku_pinjam == dict():
            print('tidak ada buku yang dipinjam')
        else:
            data = pd.DataFrame(self.buku_pinjam).T
            data.columns = ['Tahun Terbit', 'Jumlah Buku']
            print(data.to_markdown())

try:
    # update
except:
    print('Update Tidak Berhasil')

"""## $\text{Test Case}$

"""

perpus_1 = Library()

perpus_1.tambah_buku('Aku suka membaca', 2019, 2)
perpus_1.tambah_buku('Sukses UTBK', 2020, 1)
perpus_1.tambah_buku('Pemrograman Python', 1998, 3)
perpus_1.check_data_buku()

perpus_1.update_jumlah('Sukses UTBK', 2)
perpus_1.check_data_buku()

"""## $\text{Bonus Requirements}$

"""

perpus_1.pinjam_buku('Sukses UTBK')
perpus_1.check_pinjam_buku()

perpus_1.check_data_buku()

perpus_1.kembali_buku('Sukses UTBK')
perpus_1.check_pinjam_buku()

perpus_1.check_data_buku()

"""# $\text{Case: List Implementation}$

## $\text{Buat Class beserta Methods}$
"""

class Library:
    def __init__(self):
        """
        fungsi menginisialisasi list

        """
        self.data_buku = list()
        self.buku_pinjam = list()

    def reset_buku(self):
        self.data_buku = list()

    def tambah_buku(self, judul, tahun, jumlah):
        """
        fungsi menambahkan data buku

        parameters
        judul       : str   judul buku yang akan ditambahkan
        tahun       : int   tahun terbit buku
        jumlah      : int   banyak buku tersebut pada perpustakaan

        """
        self.data_buku.append([judul, tahun, jumlah])
    
    def update_judul(self, judul, judul_baru):
        self.data_buku[self.index_buku(judul)][0] = judul_baru
            
    def update_tahun(self, judul, tahun_baru):
        self.data_buku[self.index_buku(judul)][1] = tahun_baru

    def update_jumlah(self, judul, jumlah_baru):
        self.data_buku[self.index_buku(judul)][2] = jumlah_baru

    def index_buku(self, judul):
        """
        fungsi mengembalikan nilai index dari baris yang mengandung value 'judul'

        parameters
        judul   : str   judul yang mau dicari

        return
        i       : int   index dari baris yang mengandung judul
        """
        for i in range(len(self.data_buku)):
            if judul == self.data_buku[i][0]:
                return i

    def check_data_buku(self):
        # print(self.data_buku)
        data = pd.DataFrame(self.data_buku)
        data.columns = ['Judul Buku', 'Tahun Terbit', 'Jumlah Buku']
        print(data.to_markdown())
    
    def pinjam_buku(self, judul):
        if self.data_buku[self.index_buku(judul)][2] == 0:
            print("maaf buku habis")
        else:
            self.buku_pinjam.append([judul, self.data_buku[self.index_buku(judul)][1], 1])
            self.data_buku[self.index_buku(judul)][2] -= 1

    # def kembali_buku(self, judul):
    #     self.update_jumlah(judul, self.data_buku[judul][1]+1)
    #     self.buku_pinjam.pop(judul)

    def check_pinjam_buku(self):
        # print(self.data_buku)
        data = pd.DataFrame(self.buku_pinjam)
        data.columns = ['Judul Buku', 'Tahun Terbit', 'Jumlah Buku']
        print(data.to_markdown())

"""## $\text{Test Case}$

"""

perpus_1 = Library()

perpus_1.tambah_buku('Aku suka membaca', 2019, 2)
perpus_1.tambah_buku('Sukses UTBK', 2020, 1)
perpus_1.tambah_buku('Pemrograman Python', 1998, 3)
perpus_1.check_data_buku()

perpus_1.update_jumlah('Sukses UTBK', 2)
perpus_1.check_data_buku()

perpus_1.update_judul('Sukses UTBK', 'Sukses Kerja')
perpus_1.check_data_buku()

perpus_1.pinjam_buku('Sukses Kerja')
perpus_1.check_data_buku()

perpus_1.check_pinjam_buku()

1. looping dataframe. untuk setiap baris data panggil method tambah buku
2. ubah method tambah_buku

"""## $\text{Bonus Requirements}$

"""

perpus_1.pinjam_buku('Sukses UTBK')
perpus_1.check_pinjam_buku()

perpus_1.check_data_buku()

perpus_1.kembali_buku('Sukses UTBK')
perpus_1.check_pinjam_buku()

perpus_1.check_data_buku()



"""---
# $\text{Feedback Asistensi}$
Terima Kasih telah mengikuti sesi asistensi hari ini! ðŸ˜€

Jangan lupa untuk mengisi feedback juga yaa, link feedback dapat diakses di
[sini](https://bit.ly/FeedbackAsistensiOkt22)
- Kelas = Python
- Pekan = 7
- Teaching Assistant = Fathimah Aulia
"""